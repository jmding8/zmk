#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define APL 0
#define WIN 1
#define NUM 2
#define FUN 3
#define NAV 4
#define MED 5
#define SYS 6

/ {
    combos {
        compatible = "zmk,combos";

        combo_sys {
            timeout-ms = <200>;
            key-positions = <0 12>;
            bindings = <&mo SYS>;
            slow-release;
        };

        combo_fun {
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&mo FUN>;
            slow-release;
        };

        combo_lsft_num {
            timeout-ms = <50>;
            //key-positions = <13 14>;
            key-positions = <25 26>;
            bindings = <&kp LSFT>;
            slow-release;
        };

        combo_num {
            timeout-ms = <50>;
            //key-positions = <3 4>;
            key-positions = <27 28>;
            bindings = <&mo NUM>;
            slow-release;
        };
    };

    behaviors {
        hlt: hold_preferred_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_PREFERRED_LAYER_TAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping_term_ms = <200>;
            bindings = <&mo>, <&kp>;
        };

        // Use a long tap term (default=200ms), tap strongly preferred!
        tmt: tap_preferred_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_PREFERRED_MOD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping_term_ms = <300>;
            bindings = <&kp>, <&kp>;
        };

        // Use a short tapping term, which tends to produce excessive
        // hold behaviors. Then rely on the hold_behavior_enabler_keys
        // to reign in the excess holds.
        
        sht: s_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "S_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping_term_ms = <100>;
            bindings = <&kp>, <&kp>;
            //hold_behavior_enabler_keys = <13 15>;
            hold_behavior_enabler_keys = <1 3 25 27>;
        };

        dht: d_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "D_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping_term_ms = <100>;
            bindings = <&mo>, <&kp>;
            //hold_behavior_enabler_keys = <14 16>;
            hold_behavior_enabler_keys = <2 4 26 28>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        apple_layer {
            bindings = <
        &kp TAB   &kp Q  &sht LSFT W  &dht FUN E    &kp R     &kp T   /**/   &kp Y      &kp U          &kp I      &kp O       &kp P         &kp BKSP
        &kp ESC   &kp A     &kp S        &kp D      &kp F     &kp G   /**/   &kp H      &kp J          &kp K      &kp L     &kp SCLN        &kp QUOT
        &kp LSFT  &kp Z  &sht LSFT X  &dht NUM C    &kp V     &kp B   /**/   &kp N      &kp M        &kp CMMA    &kp DOT  &tmt RALT FSLH  &mt RSFT BSLH
                                       &kp LCTL   &kp LALT  &kp LGUI  /**/  &kp SPC  &hlt NAV RET  &hlt MED DEL
            >;
        };

        windows_layer {
            bindings = <
    &trans  &trans  &trans   &trans    &trans      &trans         /**/  &trans  &trans  &trans  &trans  &trans  &trans
    &trans  &trans  &trans   &trans    &trans      &trans         /**/  &trans  &trans  &trans  &trans  &trans  &trans
    &trans  &trans  &trans   &trans    &trans      &trans         /**/  &trans  &trans  &trans  &trans  &trans  &trans
                            &kp LGUI  &kp LALT  &mt LCTL K_CMENU  /**/  &trans  &trans  &trans
            >;
        };

        num_layer {
            bindings = <
    &trans  &trans    &trans   &trans    &trans    &trans   /**/   &trans    &kp NUM_7  &kp NUM_8  &kp NUM_9  &trans    &trans
    &trans   &trans   &trans   &trans    &trans    &trans   /**/   &kp EQL   &kp NUM_4  &kp NUM_5  &kp NUM_6  &kp LBKT  &kp RBKT
    &trans   &trans  &kp LSFT  &trans    &trans    &trans   /**/  &kp MINUS  &kp NUM_1  &kp NUM_2  &kp NUM_3  &trans    &trans
                               &trans  &kp TILDE  &kp GRAV  /**/   &trans    &kp NUM_0   &kp DOT
            >;
        };

        function_layer {
            bindings = <
    &trans   &trans   &kp LSFT   &trans   &trans   &trans   /**/   &kp F12   &kp F7   &kp F8   &kp F9    &trans     &trans
    &trans   &trans    &trans    &trans   &trans   &trans   /**/   &kp F11   &kp F4   &kp F5   &kp F6   &kp LBKT   &kp RBKT
    &trans   &trans    &trans    &trans   &trans   &trans   /**/   &kp F10   &kp F1   &kp F2   &kp F3    &trans     &trans
                                 &trans   &trans   &trans   /**/   &trans    &trans   &trans
            >;
        };

        nav_layer {
            bindings = <
    &trans  &trans  &trans     &trans   &trans     &trans        /**/  &trans   &trans    &kp UARW  &kp PGUP  &kp PRSC  &trans
    &trans  &trans  &kp SLCK   &trans   &trans     &trans        /**/  &trans   &kp LARW  &kp DARW  &kp RARW   &trans   &trans
    &trans  &trans  &trans    &kp CLCK  &trans  &kp PAUSE_BREAK  /**/  &kp INS  &kp PGDN  &kp HOME  &kp END    &trans   &trans
                               &trans   &trans     &trans        /**/  &trans   &trans    &trans
            >;
        };

        media_layer {
            bindings = <
    &trans  &trans   &to WIN  &trans  &trans  &trans  /**/  &trans    &trans      &kp C_VOL_UP    &trans      &trans  &trans
    &trans  &to APL  &trans   &trans  &trans  &trans  /**/  &trans  &kp C_BRI_DN  &kp C_VOL_DN  &kp C_BRI_UP  &trans  &trans
    &trans  &trans   &trans   &trans  &trans  &trans  /**/  &trans  &kp C_MUTE      &trans        &trans      &trans  &trans
                              &trans  &trans  &trans  /**/  &trans    &trans        &trans
            >;
        };

        system_layer {
            bindings = <
    &trans  &trans      &to WIN      &trans      &reset       &trans      /**/  &trans  &trans  &trans  &trans  &trans  &trans
    &trans  &to APL  &out OUT_USB    &trans      &trans       &trans      /**/  &trans  &trans  &trans  &trans  &trans  &trans
    &trans  &trans      &trans     &bt BT_CLR    &trans     &out OUT_BLE  /**/  &trans  &trans  &trans  &trans  &trans  &trans
                                &bt BT_SEL  1 &bt BT_SEL 2  &bt BT_SEL 3  /**/  &trans  &trans  &trans
            >;
        };
    };
};
