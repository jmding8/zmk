#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define APL 0
#define WIN 1
#define NUM 2
#define FUN 3
#define NAV 4
#define MED 5
#define SYS 6
// #define TRS 7

/ {

// Using a combo to trigger shift + num_layer doesn't work well because the combo
// "consumes" both key-down events, so releasing one of the two combo keys fully
// disengages both the shift and the num_layer hold beaviors.
/*
    combos {
        compatible = "zmk,combos";
        combo_shifted_num {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&mo SNM>;
            //bindings = <&mo NUM &kp J>;
        };
    };
*/

    behaviors {
        hlt: hold_preferred_layer_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "HOLD_PREFERRED_LAYER_TAP";
			#binding-cells = <2>;
			flavor = "hold-preferred";
			tapping_term_ms = <200>;
			bindings = <&mo>, <&kp>;
		};

        // I tried using a slow, tap-preferred layer tap on Q to trigger a 
        // (shift + fun_layer), with Tab still hold-tapping Tab + fun_layer.
        // This doesn't work because it is still key-press order dependent.
        // Q + Tab + J results in Shift_Fun -> Fun -> F4, instead of Shifted(F4) as desired.
        /*
        stl: slow_tap_preferred_layer_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "FAST_TAP_PREFERRED_LAYER_TAP";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping_term_ms = <300>;
			bindings = <&mo>, <&kp>;
		};
        */

        tmt: tap_preferred_mod_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "TAP_PREFERRED_MOD_TAP";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			//tapping_term_ms = <200>; // slightly slow, sometimes getting "a-" instead of "_"
			//tapping_term_ms = <100>; // too fast, getting accidental shifted letters, e.g. "part" becomes "pRt" accidentally
			//tapping_term_ms = <150>; // still too fast for me
            tapping_term_ms = <200>;   // 175 could probably work as well, but let's see if I can train myself to use 200
			bindings = <&kp>, <&kp>;
		};
    };

    keymap {
        compatible = "zmk,keymap";

        apple_layer {
            bindings = <
    &hlt FUN TAB  &tmt LSFT Q  &kp W  &kp E  &kp R  &kp T  /**/  &kp Y   &kp U   &kp I     &kp O    &kp P           &kp BKSP
    &hlt NUM ESC  &tmt LSFT A  &kp S  &kp D  &kp F  &kp G  /**/  &kp H   &kp J   &kp K     &kp L    &kp SCLN        &kp QUOT
    &kp LSFT      &kp Z        &kp X  &kp C  &kp V  &kp B  /**/  &kp N   &kp M   &kp CMMA  &kp DOT  &tmt RALT FSLH  &mt RSFT BSLH
                         &kp LCTL    &kp LALT    &kp LGUI  /**/  &kp SPC    &hlt NAV RET    &hlt MED DEL
            >;
        };

        windows_layer {
            bindings = <
    &trans  &trans  &trans  &trans    &trans    &trans            /**/  &trans  &trans  &trans  &trans  &trans  &trans
    &trans  &trans  &trans  &trans    &trans    &trans            /**/  &trans  &trans  &trans  &trans  &trans  &trans
    &trans  &trans  &trans  &trans    &trans    &trans            /**/  &trans  &trans  &trans  &trans  &trans  &trans
                            &kp LGUI  &kp LALT  &mt LCTL K_CMENU  /**/  &trans  &trans  &trans
            >;
        };

        num_layer {
            bindings = <
    &mo SYS  &trans    &trans  &trans    &trans     &trans  /**/  &trans     &kp NUM_7  &kp NUM_8  &kp NUM_9  &trans    &trans
    &trans   &kp LSFT  &trans  &kp GRAV  &kp TILDE  &trans  /**/  &kp EQL    &kp NUM_4  &kp NUM_5  &kp NUM_6  &kp LBKT  &kp RBKT
    &trans   &trans    &trans  &trans    &trans     &trans  /**/  &kp MINUS  &kp NUM_1  &kp NUM_2  &kp NUM_3  &trans    &trans
                               &trans    &trans     &trans  /**/  &trans     &kp NUM_0  &kp DOT
            >;
        };

        function_layer {
            bindings = <
    &trans   &kp LSFT  &trans   &trans   &trans   &trans  /**/  &kp F12   &kp F7   &kp F8   &kp F9   &trans     &trans
    &mo SYS  &trans    &trans   &trans   &trans   &trans  /**/  &kp F11   &kp F4   &kp F5   &kp F6   &kp LBKT   &kp RBKT
    &trans   &trans    &trans   &trans   &trans   &trans  /**/  &kp F10   &kp F1   &kp F2   &kp F3   &trans     &trans
                                &trans   &trans   &trans  /**/  &trans    &trans   &trans
            >;
        };

        nav_layer {
            bindings = <
    &trans  &trans  &trans    &trans    &trans  &trans           /**/  &trans   &trans    &kp UARW  &kp PGUP  &kp PRSC  &trans
    &trans  &trans  &kp SLCK  &trans    &trans  &trans           /**/  &trans   &kp LARW  &kp DARW  &kp RARW  &trans    &trans
    &trans  &trans  &trans    &kp CLCK  &trans  &kp PAUSE_BREAK  /**/  &kp INS  &kp PGDN  &kp HOME  &kp END   &trans    &trans
                              &trans    &trans  &trans           /**/  &trans   &trans    &trans
            >;
        };

        media_layer {
            bindings = <
    &trans  &trans   &to WIN  &trans  &trans  &trans  /**/  &trans  &trans        &kp C_VOL_UP  &trans        &trans  &trans
    &trans  &to APL  &trans   &trans  &trans  &trans  /**/  &trans  &kp C_BRI_DN  &kp C_VOL_DN  &kp C_BRI_UP  &trans  &trans
    &trans  &trans   &trans   &trans  &trans  &trans  /**/  &trans  &kp C_MUTE    &trans        &trans        &trans  &trans
                              &trans  &trans  &trans  /**/  &trans  &trans        &trans
            >;
        };

        system_layer {
            bindings = <
    &trans  &trans   &to WIN      &trans       &reset       &trans       /**/  &trans  &trans  &trans  &trans  &trans  &trans
    &trans  &to APL  &out OUT_USB &trans       &trans       &trans       /**/  &trans  &trans  &trans  &trans  &trans  &trans
    &trans  &trans   &trans       &bt BT_CLR   &trans       &out OUT_BLE /**/  &trans  &trans  &trans  &trans  &trans  &trans
                                  &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 /**/  &trans  &trans  &trans
            >;
        };

        transition_layer {
            bindings = <
    &mo FUN  &trans  &trans  &trans  &trans  &trans  /**/  &trans  &trans  &trans  &trans  &trans  &trans
    &mo NUM  &trans  &trans  &trans  &trans  &trans  /**/  &trans  &trans  &trans  &trans  &trans  &trans
    &trans   &trans  &trans  &trans  &trans  &trans  /**/  &trans  &trans  &trans  &trans  &trans  &trans
                             &trans  &trans  &trans  /**/  &trans  &trans  &trans
            >;
        };

    };
};
